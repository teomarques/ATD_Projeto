%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% AUDIO_DIGIT_ANALYSIS.M
%
% This script performs the following tasks for digit identification from audio signals:
%  1) Creates a metadata table for audio files and imports the signals.
%  2) Preprocesses the audio signals (removes initial silence, normalizes amplitude).
%  3) Plots raw audio signals for digits 0–9, repetition 5 (replicates Figure 2).
%  4) Extracts 5 temporal features from each preprocessed signal.
%  5) Plots preprocessed audio signals for digits 0–9, repetition 5.
%  6) Visually compares the plots from steps 3 and 5 (described in the text).
%  7) Visualizes the features and identifies the best for digit discrimination (replicates Figure 3).
%  8) Removes audio signals from the table and saves to finalAudioData.mat.
%
% Author: [Your Name]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear; close all; clc;

%% INITIAL_PARAMETERS
audioFolderPath      = 'samples';    % Path to folder containing .wav audio files
participantID        = 40;           % Unique identifier for the participant
digitNumbers         = 0:9;          % Digits from 0 to 9
repetitionNumbers    = 0:49;         % 50 recordings per digit
numberOfDigits       = length(digitNumbers);
numberOfRepetitions  = length(repetitionNumbers);

%% STEP_1_AND_2: CREATE_METADATA_TABLE_AND_IMPORT_AUDIO_SIGNALS
totalRecordings = numberOfDigits * numberOfRepetitions;
audioFilePath        = cell(totalRecordings, 1);
audioFileName        = cell(totalRecordings, 1);
participantIDVector  = zeros(totalRecordings, 1);
digitValue           = zeros(totalRecordings, 1);
repetitionNumber     = zeros(totalRecordings, 1);
rawAudioSignal       = cell(totalRecordings, 1);
samplingRate         = zeros(totalRecordings, 1);

recordingIndex = 1;
for currentDigit = digitNumbers
    for currentRepetition = repetitionNumbers
        fileNameStr = sprintf('%d_%d_%d.wav', currentDigit, participantID, currentRepetition);
        filePath = fullfile(audioFolderPath, fileNameStr);

        audioFilePath{recordingIndex}    = filePath;
        audioFileName{recordingIndex}     = fileNameStr;
        participantIDVector(recordingIndex) = participantID;
        digitValue(recordingIndex)       = currentDigit;
        repetitionNumber(recordingIndex) = currentRepetition;

        try
            [signalData, sampleRate] = audioread(filePath);
        catch ME
            warning('Error reading %s: %s', filePath, ME.message);
            signalData = []; sampleRate = NaN;
        end

        rawAudioSignal{recordingIndex} = signalData;
        samplingRate(recordingIndex)   = sampleRate;

        recordingIndex = recordingIndex + 1;
    end
end

metadataTable = table(audioFilePath, audioFileName, participantIDVector, digitValue, repetitionNumber, ...
                      rawAudioSignal, samplingRate, ...
    'VariableNames', {'AudioFilePath', 'AudioFileName', 'ParticipantID', 'DigitValue', ...
                      'RepetitionNumber', 'RawAudioSignal', 'SamplingRate'});

disp('--- Metadata Table with Audio Signals (first 10 rows) ---');
disp(metadataTable(1:min(10, height(metadataTable)), :));

%% STEP_3: PLOT_RAW_AUDIO_SIGNALS (DIGITS 0–9, REPETITION 5)
figure('Name', 'OriginalAudioSignalPlots', 'NumberTitle', 'off', 'Position', [100 100 1200 800]);
for currentDigit = 0:8  % Plot digits 0–8 in a 3x3 grid to match Figure 2
    subplot(3, 3, currentDigit + 1);
    signalIndex = find(metadataTable.DigitValue == currentDigit & metadataTable.RepetitionNumber == 5, 1);
    if ~isempty(signalIndex) && ~isempty(metadataTable.RawAudioSignal{signalIndex})
        signalData = metadataTable.RawAudioSignal{signalIndex};
        sampleRate = metadataTable.SamplingRate(signalIndex);
        timeAxis = (0:length(signalData) - 1) / sampleRate;
        plot(timeAxis, signalData, 'b', 'LineWidth', 2);  % Blue line, thicker for visibility
        xlabel('Time (s)', 'FontSize', 12);
        ylabel('Amplitude', 'FontSize', 12);
        title(sprintf('Digit %d, Repetition 5', currentDigit), 'FontSize', 14);
        switch currentDigit
            case {0, 2, 8}
                ylim([-0.02 0.02]);
            case {1, 3, 4, 5, 7}
                ylim([-0.03 0.03]);
            case 6
                ylim([-0.04 0.04]);
        end
        grid on;
        set(gca, 'FontSize', 10);
    else
        title(sprintf('Digit %d (not found)', currentDigit), 'FontSize', 14);
    end
end
sgtitle('Original Audio Signal Plots', 'FontSize', 16);

%% STEP_4: PREPROCESS_AUDIO_SIGNALS
% Steps: 1) Remove initial silence based on energy threshold
%        2) Normalize amplitude to [-1, 1]
% Note: No padding applied, as not required for features or plots
preprocessedAudioSignals = cell(totalRecordings, 1);

for i = 1:totalRecordings
    if ~isempty(metadataTable.RawAudioSignal{i})
        preprocessedSignal = removeInitialSilenceAndNormalize(metadataTable.RawAudioSignal{i}, metadataTable.SamplingRate(i));
    else
        preprocessedSignal = [];
    end
    preprocessedAudioSignals{i} = preprocessedSignal;
end

metadataTable.PreprocessedAudioSignal = preprocessedAudioSignals;

%% STEP_5: PLOT_PREPROCESSED_AUDIO_SIGNALS (DIGITS 0–9, REPETITION 5)
figure('Name', 'PreprocessedAudioSignalPlots', 'NumberTitle', 'off');
for currentDigit = 0:8  % Plot digits 0–8 in a 3x3 grid
    subplot(3, 3, currentDigit + 1);
    signalIndex = find(metadataTable.DigitValue == currentDigit & metadataTable.RepetitionNumber == 5, 1);
    if ~isempty(signalIndex) && ~isempty(metadataTable.PreprocessedAudioSignal{signalIndex})
        signalData = metadataTable.PreprocessedAudioSignal{signalIndex};
        sampleRate = metadataTable.SamplingRate(signalIndex);
        timeAxis = (0:length(signalData) - 1) / sampleRate;
        plot(timeAxis, signalData, 'b');
        xlabel('Time (s)');
        ylabel('Amplitude');
        title(sprintf('Digit %d, Repetition 5', currentDigit));
        ylim([-1 1]);  % Normalized amplitude range
        grid on;
    else
        title(sprintf('Digit %d (not found)', currentDigit));
    end
end
sgtitle('Preprocessed Audio Signal Plots');

%% STEP_6: VISUAL_COMPARISON_OF_PLOTS
% Description to be provided in accompanying text as per project requirements

%% STEP_7: EXTRACT_TEMPORAL_FEATURES
% Features extracted: 1) Total Energy, 2) Standard Deviation, 3) Maximum Amplitude,
%                     4) Zero Crossing Rate, 5) Duration (seconds)
numberOfFeatures = 5;
featureMatrix = zeros(totalRecordings, numberOfFeatures);

for i = 1:totalRecordings
    if ~isempty(metadataTable.PreprocessedAudioSignal{i})
        featureValues = extractTemporalFeatures(metadataTable.PreprocessedAudioSignal{i}, metadataTable.SamplingRate(i));
    else
        featureValues = zeros(1, numberOfFeatures);
    end
    featureMatrix(i, :) = featureValues;
end

metadataTable.TotalEnergy      = featureMatrix(:, 1);
metadataTable.StandardDeviation = featureMatrix(:, 2);
metadataTable.MaximumAmplitude  = featureMatrix(:, 3);
metadataTable.ZeroCrossingRate  = featureMatrix(:, 4);
metadataTable.Duration         = featureMatrix(:, 5);

%% STEP_8: VISUALIZE_FEATURES
% Part A: Boxplot and 3D Scatter to replicate Figure 3

% Boxplot of Total Energy by Digit
figure('Name', 'Boxplot_TotalEnergy', 'NumberTitle', 'off', 'Position', [100, 100, 1200, 600]);
boxchart(categorical(metadataTable.DigitValue), metadataTable.TotalEnergy, 'BoxFaceColor', 'b', 'MarkerColor', [0.7 0.7 1]);
xlabel('Digit');
ylabel('Total Energy');
title('Boxplot of Total Energy by Digit');

% 3D Scatter Plot of Zero Crossing Rate, Standard Deviation, and Duration
figure('Name', '3DScatter_Features', 'NumberTitle', 'off', 'Position', [100, 100, 1200, 600]);
hold on;
digitColors = [0.7 0.7 1; 1 0.7 0.7; 0 1 0; 1 0 0; 1 1 0; 0.5 0 0.5; 1 0.5 0; 0 1 1; 0.6 0.3 0; 0 0 0.5];
for currentDigit = 0:9
    digitIndices = metadataTable.DigitValue == currentDigit;
    scatter3(metadataTable.ZeroCrossingRate(digitIndices), metadataTable.StandardDeviation(digitIndices), ...
             metadataTable.Duration(digitIndices), 10, digitColors(currentDigit + 1, :), 'filled');
end
hold off;
xlabel('Zero Crossing Rate');
ylabel('Standard Deviation');
zlabel('Duration (s)');
title('3D Scatter of Zero Crossing Rate, Standard Deviation, and Duration');
legend(cellstr(num2str((0:9)')), 'Location', 'eastoutside');

% Scatter Plots of Extracted Features
featureNames = {'Total Energy', 'Standard Deviation', 'Maximum Amplitude', 'Zero Crossing Rate', 'Duration (s)'};
for featureIndex = 1:numberOfFeatures
    if mod(featureIndex, 2) == 1
        figure('Name', ['ScatterPlot_', featureNames{featureIndex}], 'NumberTitle', 'off', 'Position', [100, 100, 1200, 600]);
    end
    subplot(1, 2, mod(featureIndex - 1, 2) + 1);
    hold on;
    for currentDigit = digitNumbers
        digitIndices = (metadataTable.DigitValue == currentDigit);
        scatter(repmat(currentDigit, 1, sum(digitIndices)), featureMatrix(digitIndices, featureIndex), 'filled');
    end
    hold off;
    xlabel('Digit');
    ylabel(featureNames{featureIndex});
    xticks(digitNumbers);
    title(featureNames{featureIndex});
end

% Boxplots of Extracted Features
for featureIndex = 1:numberOfFeatures
    if mod(featureIndex, 2) == 1
        figure('Name', ['Boxplot_', featureNames{featureIndex}], 'NumberTitle', 'off', 'Position', [100, 100, 1200, 600]);
    end
    subplot(1, 2, mod(featureIndex - 1, 2) + 1);
    boxchart(categorical(metadataTable.DigitValue), featureMatrix(:, featureIndex));
    xlabel('Digit');
    ylabel(featureNames{featureIndex});
    title(featureNames{featureIndex});
end

%% STEP_9: REMOVE_AUDIO_SIGNALS_AND_SAVE
metadataTable.RawAudioSignal = [];
metadataTable.PreprocessedAudioSignal = [];
save('finalAudioData.mat', 'metadataTable');

disp('--- End: Audio data structure saved in finalAudioData.mat ---');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% AUXILIARY_FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [preprocessedSignal] = removeInitialSilenceAndNormalize(signal, sampleRate)
    frameDurationSec = 0.001;  % Duration of each frame in seconds
    frameSamples = round(frameDurationSec * sampleRate);
    numberOfFrames = floor(length(signal) / frameSamples);
    frameEnergy = calculateFrameEnergy(signal, frameSamples, numberOfFrames);

    energyThreshold = 0.01;  % Threshold to detect signal start
    startFrame = find(frameEnergy > energyThreshold, 1);
    if isempty(startFrame)
        startFrame = 1;
    end
    startSample = (startFrame - 1) * frameSamples + 1;

    preprocessedSignal = signal(startSample:end);

    minValue = min(preprocessedSignal);
    maxValue = max(preprocessedSignal);
    if (maxValue - minValue) < 1e-12  % Avoid division by zero
        preprocessedSignal = zeros(size(preprocessedSignal));
    else
        preprocessedSignal = (preprocessedSignal - minValue) / (maxValue - minValue);  % Scale to [0, 1]
        preprocessedSignal = 2 * preprocessedSignal - 1;                              % Scale to [-1, 1]
    end
end

function frameEnergy = calculateFrameEnergy(signal, frameSamples, numberOfFrames)
    frameEnergy = zeros(numberOfFrames, 1);
    for frameIndex = 1:numberOfFrames
        frame = signal((frameIndex - 1) * frameSamples + 1 : frameIndex * frameSamples);
        frameEnergy(frameIndex) = sum(frame .^ 2);
    end
end

function featureValues = extractTemporalFeatures(signal, sampleRate)
    featureValues = zeros(1, 5);
    featureValues(1) = sum(signal .^ 2);         % Total Energy
    featureValues(2) = std(signal);              % Standard Deviation
    featureValues(3) = max(abs(signal));         % Maximum Amplitude
    featureValues(4) = calculateZeroCrossingRate(signal);  % Zero Crossing Rate
    featureValues(5) = length(signal) / sampleRate;       % Duration in seconds
end

function zeroCrossingRate = calculateZeroCrossingRate(signal)
    signalSign = sign(signal);
    signDifference = diff(signalSign);
    zeroCrossingRate = sum(signDifference ~= 0) / (length(signal) - 1);
end
